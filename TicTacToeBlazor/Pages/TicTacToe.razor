@page "/tictactoe"
@using TicTacToeBlazor.Components
@using TicTacToeBlazor.Helpers.TicTacToeGame

<PageTitle>Tic-Tac-Toe</PageTitle>

<h1>Tic-Tac-Toe</h1>
<p>
    Below is a simple Tic-Tac-Toe game. It is implemented in <b>C#</b> and is running in the browser using <a
        href="https://webassembly.org/" target="_blank">WebAssembly</a>!
</p>
<div class="container" style="margin-left: 0;">
    <div class="row justify-content-start">
        <div class="col-auto">
            <Board ClickHandler="@((i)=>HandleCellClick(i))" game=@game />

        </div>
        <div class="col-auto">
            <div>
                <h3>Game status:</h3>

                @switch (game.State)
                {
                    case GameState.NotFinished:
                        <p>Next turn is: <b>@game.NextMove()</b>!</p>
                        break;
                    case GameState.Tie:
                        <p>It's a <b>tie</b>!</p>
                        break;
                    case GameState.WinnerX:
                        <p><b>X</b> wins! X always wins...</p>
                        break;
                    case GameState.WinnerO:
                        <p><b>O</b> wins!</p>
                        break;
                }
            </div>
        </div>
    </div>
    <div class="row justify-content-start">
        <div>
            @if (game.State == GameState.NotFinished)
            {
                <button class="btn btn-primary mt-3" @onclick="() => game.ResetGame()">Reset!</button>
            }
            else
            {
                <button class="btn btn-primary mt-3" @onclick="() => game.ResetGame()">Play again!</button>

            }
        </div>
    </div>
</div>

@code {
    private TicTacToeGame game = new TicTacToeGame();

    private String resetButtonText = "Reset!";

    private void HandleCellClick(int i)
    {
        game.PlayCell(i);
    }

}